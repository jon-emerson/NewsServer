// Article object definition for NewsServer.

import "com/janknspank/database/extensions.proto";

option java_package = "com.janknspank.proto";
option java_outer_classname = "ArticleProto";

message Article {
  option (database_collection) = "MongoDB.Article";

  extensions 9, 12; // Old fields.

  optional string url_id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string url = 2 [
    (required) = YES,
    (string_length) = 767,
    (string_charset) = LATIN1
  ];

  optional string title = 3 [
    (required) = YES,
    (storage_method) = PULL_OUT,
    (string_length) = 256
  ];

  optional string type = 4 [
    (string_length) = 25
  ];

  optional string author = 5 [
    (string_length) = 256
  ];

  optional string copyright = 6 [
    (string_length) = 256
  ];

  optional string description = 7 [
    (required) = YES,
    (string_length) = 2048
  ];

  optional string image_url = 8 [
    (string_length) = 2048 // 767
  ];

  repeated string paragraph = 13 [
    // (required) = YES,
    (client_serialization) = EXCLUDE,
    (string_length) = 10240
  ];

  optional int64 published_time = 10 [
    (required) = YES,
    (storage_method) = INDEX
  ];

  optional int64 modified_time = 11;

  optional int64 word_count = 14 [
    (required) = YES
  ];

  repeated ArticleKeyword keyword = 15;
  repeated ArticleIndustry industry = 16;
  repeated SocialEngagement social_engagement = 17;
}

message ArticleKeyword {
  // The literal English keyword.
  optional string keyword = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 50
  ];

  // Number of occurrences + other factors.
  optional int32 strength = 2 [
    (required) = YES
  ];

  // 'o' for organization, 'p' for person, 'l' for location
  // @see com.janknspank.data.EntityType
  optional string type = 3 [
    (required) = YES,
    (storage_method) = PULL_OUT,
    (string_length) = 5,
    (string_charset) = LATIN1
  ];

  enum Source {
    UNKNOWN = 0;
    NLP = 1;
    HYPERLINK = 2;
    META_TAG = 3;
  }
  optional Source source = 4 [
    default = UNKNOWN
  ];
}

message ArticleIndustry {
  optional int32 industry_code_id = 1 [
    (required) = YES,
    (storage_method) = PULL_OUT
  ];

  // Normalized similarity score for this article's relevance against the
  // {@code industry_code_id} industry.  Range is between 0 and 1.  A score
  // near 1 means this article is extremely relevant to the given industry.
  // A score above 0.80 means its relevance is in the top 20% of articles.
  optional double similarity = 2;

  // Raw output from the cosine similarity function for the relevance of this
  // article to the {@code industry_code_id} industry.
  optional double raw_similarity = 3 [
    (required) = YES
  ];
}

message SocialEngagement {
  enum Site {
    UNKNOWN = 0;
    FACEBOOK = 1;
    TWITTER = 2;
  }
  optional Site site = 1 [
    default = UNKNOWN
  ];

  optional int64 share_count = 2 [
    (required) = YES
  ];

  // A number between 0 and 1 representing the relative strength of this
  // article's Facebook shares versus articles of similar age on similar
  // sites.  1 is considered very high strength, aka lots of shares.
  // TODO(jonemerson): Make this required once the DB is updated.
  optional double share_score = 3;

  optional int64 like_count = 4;
  optional int64 comment_count = 5;
  optional int64 create_time = 6;
}
