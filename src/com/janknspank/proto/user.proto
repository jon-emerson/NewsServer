// User object definition for NewsServer.

import "com/janknspank/database/extensions.proto";
import "com/janknspank/proto/core.proto";

option java_package = "com.janknspank.proto";
option java_outer_classname = "UserProto";

message User {
  option (database_collection) = "MongoDB.User";

  optional string id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string first_name = 2 [
    (string_length) = 100
  ];

  optional string last_name = 3 [
    (string_length) = 100
  ];

  optional string email = 4 [
    (storage_method) = INDEX,
    (string_length) = 100
  ];

  optional string linked_in_id = 5 [
    (string_length) = 25
  ];

  optional string facebook_id = 6 [
    (storage_method) = INDEX,
    (string_length) = 25
  ];

  optional string facebook_access_token = 19 [
    (string_length) = 500,
    (client_serialization) = EXCLUDE
  ];

  optional int64 create_time = 7 [
    (required) = YES
  ];

  optional int64 last_login_time = 8;

  optional string linked_in_access_token = 9 [
    (string_length) = 500,
    (client_serialization) = EXCLUDE
  ];

  optional LinkedInProfile linked_in_profile = 10 [
    // Excluded because this is the raw LinkedIn API XML.
    (client_serialization) = EXCLUDE
  ];

  repeated LinkedInContact linked_in_contact = 11 [
    // Excluded because we want to prune tombstones and what they tombstone
    // from the response.
    (client_serialization) = EXCLUDE
  ];

  optional string linked_in_profile_photo_url = 18 [
    (string_length) = 200
  ];

  repeated AddressBookContact address_book_contact = 12 [
    // Excluded because we want to prune tombstones and what they tombstone
    // from the response.
    (client_serialization) = EXCLUDE
  ];

  repeated UrlFavorite url_favorite = 14 [
    // Excluded because the client needs to receive an entire Article object,
    // which the /server/ code handles resolving for us.
    (client_serialization) = EXCLUDE
  ];

  repeated Interest interest = 15 [
    // Excluded because we want to prune tombstones and what they tombstone
    // from the response.
    (client_serialization) = EXCLUDE
  ];

  // Stores the last five times the user's used the app, as spaced at least one
  // hour apart.  Times are in milliseconds.  They're at least an hour apart
  // for various business logic reasons, and to keep down on writes in read
  // flows.
  repeated int64 last_5_app_use_time = 20 [
    (client_serialization) = EXCLUDE
  ];

  // Timezone handling: As last_5_app_use_time is updated, also remember the
  // user's IP address.  Then, periodically, go fetch the user's predicted
  // timezone as part of the push notification process, so that we can try
  // not to send notifications when people are sleeping.
  optional string last_ip_address = 21 [
    (string_length) = 20
  ];
  optional string timezone_estimate = 22 [
    (string_length) = 10
  ];
  optional int64 last_timezone_estimate_update = 23;

  // The time, in milliseconds, when we sent this user a welcome email.
  optional int64 welcome_email_sent_time = 24;

  // Whether the user has opted-out of emails.
  optional bool opt_out_email = 25;
}

message AddressBookContact {
  optional string name = 2 [
    (required) = YES,
    (string_length) = 100
  ];
}

message UrlFavorite {
  optional string url_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional int64 create_time = 2 [
    (required) = YES
  ];
}

message LinkedInProfile {
  message Employer {
    optional string name = 1 [
      (required) = YES,
      (string_length) = 100
    ];
    optional string title = 2 [
      (required) = YES,
      (string_length) = 100
    ];
    optional string entity_id = 3 [
      (string_length) = 24
    ];
    optional int64 start_time = 4;
    optional int64 end_time = 5;
  }
  optional Employer current_employer = 1;
  repeated Employer past_employer = 2;

  optional string data = 3 [
    (required) = YES,
    (string_length) = 102400
  ];

  optional int64 create_time = 4 [
    (required) = YES,
    (client_serialization) = EXCLUDE
  ];
}

message LinkedInContact {
  optional string name = 2 [
    (required) = YES,
    (string_length) = 100
  ];
}

message Interest {
  extensions 7; // Deprecated IDs.

  optional string id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1,
    (client_serialization) = EXCLUDE
  ];

  enum InterestType {
    UNKNONWN = 0;
    INDUSTRY = 1;
    ENTITY = 2; // People, companies, etc.
    LINKED_IN_CONTACTS = 3;
    ADDRESS_BOOK_CONTACTS = 4;
  }
  optional InterestType type = 2 [
    (required) = YES
  ];

  // Where did we get this interest from?
  enum InterestSource {
    UNKNOWN = 0;
    USER = 1;
    LINKED_IN_PROFILE = 2; // Derived from LinkedIn Profile response.
    FACEBOOK_PROFILE = 4; // Derived from Facebook profile response.

    // Tombstone, represents an interest the user explicitly DELETED.
    // This enables the user to follow his LinkedIn contacts but then delete
    // Chris Messina (or whoever).
    TOMBSTONE = 3;
  }
  optional InterestSource source = 3 [
    (required) = YES
  ];

  optional int64 create_time = 4 [
    (required) = YES,
    (client_serialization) = EXCLUDE
  ];

  // Set if IFF interest.type == InterestType.INDUSTRY.
  optional int32 industry_code = 5;

  // Set if IFF interest.type == InterestType.ENTITY.
  optional Entity entity = 6;
}

message UserAction {
  option (database_collection) = "MySQL.UserAction";

  optional string id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string user_id = 2 [
    (required) = YES,
    (string_length) = 24,
    (string_charset) = LATIN1,
    (storage_method) = INDEX
  ];

  enum ActionType {
    UNKNOWN = 0;
    FAVORITE = 1; // aka Bookmark
    X_OUT = 2; // Swipe to dismiss
    TAP_FROM_STREAM = 3; // User tapped the article cell to view the full article from the stream
    SHARE = 4;
    READ_ARTICLE = 5;
    VOTE_UP = 6; // Swipe right "Good to know"
    UNVOTE_UP = 7;
    SCROLL_PAST = 8;
  }
  optional ActionType action_type = 3 [
    (required) = YES,
    (storage_method) = PULL_OUT
  ];

  optional string url_id = 4 [
    (required) = YES,
    (string_length) = 24,
    (string_charset) = LATIN1,
    (storage_method) = PULL_OUT
  ];

  optional string url = 5 [
    (required) = YES,
    (string_length) = 767,
    (string_charset) = LATIN1,
    (storage_method) = PULL_OUT
  ];

  optional int64 create_time = 6 [
    (required) = YES,
    (storage_method) = INDEX
  ];

  // IFF ActionType == READ_ARTICLE
  optional int64 read_start_time = 7;

  // IFF ActionType == READ_ARTICLE
  optional int64 read_end_time = 8;

  // The current user's interests, regardless of whether they were used
  // specifically in the stream the user was acting in.
  repeated Interest interest = 11 [
    (client_serialization) = EXCLUDE
  ];

  // If the user was viewing an interest stream, this object describes
  // the entity / keyword / etc that they were viewing.
  optional Interest on_stream_for_interest = 12;
}
