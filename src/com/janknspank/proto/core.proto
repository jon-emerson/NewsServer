// Core definitions for NewsServer protos.

import "com/janknspank/proto/extensions.proto";

option java_package = "com.janknspank.proto";

message Article {
  extensions 9; // Old fields.

  optional string url_id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string url = 2 [
    (required) = YES,
    (string_length) = 767,
    (string_charset) = LATIN1
  ];

  optional string title = 3 [
    (required) = YES,
    (storage_method) = PULL_OUT,
    (string_length) = 256
  ];

  optional string type = 4 [
    (string_length) = 25
  ];

  optional string author = 5 [
    (string_length) = 256
  ];

  optional string copyright = 6 [
    (string_length) = 256
  ];

  optional string description = 7 [
    (required) = YES,
    (string_length) = 2048
  ];

  optional string image_url = 8 [
    (string_length) = 2048 // 767
  ];

  repeated string paragraph = 13 [
    // (required) = YES,
    (client_serialization) = EXCLUDE,
    (string_length) = 10240
  ];

  optional int64 published_time = 10 [
    (required) = YES,
    (storage_method) = INDEX
  ];

  optional int64 modified_time = 11;
}

message ArticleKeyword {
  optional string url_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1,
    (client_serialization) = EXCLUDE
  ];

  // The literal English keyword.
  optional string keyword = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 50
  ];

  // Number of occurrences + other factors.
  optional int32 strength = 3 [
    (required) = YES
  ];

  // 'o' for organization, 'p' for person, 'l' for location
  // @see com.janknspank.data.EntityType
  optional string type = 4 [
    (required) = YES,
    (storage_method) = PULL_OUT,
    (string_length) = 5,
    (string_charset) = LATIN1
  ];

  enum Source {
    UNKNOWN = 0;
    NLP = 1;
    HYPERLINK = 2;
    META_TAG = 3;
  }
  optional Source source = 5 [
    default = UNKNOWN
  ];
}

message Link {
  optional string origin_url_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string destination_url_id = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional int64 discovery_time = 3 [
    (required) = YES
  ];

  optional int64 last_found_time = 4 [
    (required) = YES
  ];
}

message Url {
  optional string id = 2 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string url = 1 [
    (required) = YES,
    (storage_method) = UNIQUE_INDEX,
    (string_length) = 767,
    (string_charset) = LATIN1
  ];

  optional int64 tweet_count = 3 [
    (required) = YES
  ];

  optional int64 discovery_time = 4 [
    (required) = YES,
    (client_serialization) = EXCLUDE
  ];

  optional int64 last_crawl_start_time = 5 [
    (storage_method) = PULL_OUT,
    (client_serialization) = EXCLUDE
  ];

  optional int64 last_crawl_finish_time = 6 [
    (storage_method) = PULL_OUT,
    (client_serialization) = EXCLUDE
  ];

  // Score between 0 to 200, where 200 means "we really should crawl this
  // ASAP", and 0 means we might not even bother.
  // General guidelines:
  // 2000 - A news article from today
  // 100 - A news article from a year ago
  // 10 - A page that's not a news article
  // 0 - Something we've crawled recently
  optional int64 crawl_priority = 7 [
    // (required) = YES,
    (storage_method) = INDEX,
    (client_serialization) = EXCLUDE
  ];
}

message User {
  extensions 6; // Old fields.

  optional string id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string name = 2 [
    (string_length) = 100
  ];

  optional string email = 3 [
    (required) = YES,
    (storage_method) = UNIQUE_INDEX,
    (string_length) = 100
  ];

  optional string linked_in_id = 4 [
    (string_length) = 25
  ];

  optional string facebook_id = 5 [
    (string_length) = 25
  ];

  optional int64 create_time = 7 [
    (required) = YES
  ];

  optional int64 last_login_time = 8;

  optional string linked_in_access_token = 9 [
    (required) = YES,
    (storage_method) = PULL_OUT,
    (string_length) = 500,
    (client_serialization) = EXCLUDE
  ];
}

message Session {
  optional string session_key = 1 [
    (required) = YES,
    (storage_method) = UNIQUE_INDEX,
    (string_length) = 128
  ];

  optional string user_id = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional int64 create_time = 3 [
    (required) = YES
  ];
}

message LinkedInProfile {
  optional string user_id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string data = 2 [
    (required) = YES,
    (string_length) = 102400
  ];

  optional int64 create_time = 3 [
    (required) = YES
  ];
}

message LinkedInConnections {
  optional string user_id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string data = 2 [
    (required) = YES,
    (string_length) = 102400
  ];

  optional int64 create_time = 3 [
    (required) = YES
  ];
}

message AddressBook {
  optional string user_id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string data = 2 [
    (required) = YES,
    (string_length) = 102400
  ];

  optional int64 create_time = 3 [
    (required) = YES
  ];
}

message UserUrlRating {
  optional string user_id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string url_id = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional int32 rating = 3 [
    (required) = YES
  ];

  optional int64 create_time = 4 [
    (required) = YES
  ];
}

message UserUrlFavorite {
  optional string user_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string url_id = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional int64 create_time = 3 [
    (storage_method) = PULL_OUT,
    (required) = YES
  ];
}

message UserIndustry {
  optional string user_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional int32 industry_code_id = 2 [
    (required) = YES,
    (storage_method) = INDEX
  ];

  optional int64 joined_industry_time = 3 [
    (storage_method) = PULL_OUT
  ];
}

message UserInterest {
  optional string id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string user_id = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string keyword = 3 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 100
  ];

  // Where did we get this interest from?
  // 'ab' = Address book.
  // 'lp' = LinkedIn profile.
  // 'lc' = LinkedIn contacts.
  // 'le' = LinkedIn current employer.
  // 'u' = From the user himself, explicitly.
  // 't' = Tombstone, represents an interest the user explicitly DELETED.
  optional string source = 4 [
    (required) = YES,
    (storage_method) = PULL_OUT,
    (string_length) = 2
  ];

  // 'o' for organization, 'p' for person, 'l' for location.
  // If not known, NULL.
  optional string type = 5 [
    (string_length) = 5,
    (string_charset) = LATIN1
  ];
}

message Entity {
  optional string id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string keyword = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 100
  ];

  optional string type = 3 [
    (required) = YES,
    (storage_method) = PULL_OUT,
    (string_length) = 5,
    (string_charset) = LATIN1
  ];

  enum Source {
    UNKNOWN = 0;
    DBPEDIA_INSTANCE_TYPE = 1;
    DBPEDIA_LONG_ABSTRACT = 2;
    ANGELLIST = 3;
  }
  optional Source source = 4 [
    (required) = YES,
    (storage_method) = PULL_OUT
  ];

  // If this ID has been found to be semantically equivalent to another ID, this
  // field points at the "canonical" version of this object.  E.g. if we find
  // Google in Wikipedia and AngelList, the Wikipedia Entity would be canonical
  // and would have canonical_id=NULL, while AngelList's Entity would have its
  // canonical_id equal the Wikipedia Entity's id.
  optional string canonical_id = 5 [
    (storage_method) = PULL_OUT,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  // These are unique things about an Entity to disambiguate it from other
  // Entities that might be expressed using the same string.  E.g. there are
  // many Kevin Rose's in the world, but only one that started Digg and worked
  // for Google Ventures.  The guy from Digg would have "Digg" and "Google
  // Ventures" as high-strengthed topics in his Entity.
  message EntityTopic {
    optional string entity_id = 1 [
      (string_length) = 24,
    (string_charset) = LATIN1
    ];

    optional string keyword = 2 [
      (required) = YES,
      (string_length) = 100
    ];

    // same l/o/p types as Entities have
    optional string type = 3 [
      (string_length) = 5,
      (string_charset) = LATIN1
    ];

    // Number of occurrences + other factors.
    optional int32 strength = 4 [
      (required) = YES
    ];

    enum Context {
      UNKNOWN = 0;
      ANGELLIST_WORKED_AT = 1;
      ANGELLIST_FOUNDED = 2;
      ANGELLIST_INVESTED_IN = 3;
      ANGELLIST_ADVISED = 4;
      WIKIPEDIA_SUBTOPIC = 5;
    }
    optional Context context = 5 [
      default = UNKNOWN
    ];
  };
  repeated EntityTopic topic = 6;
}

message TrainedArticleIndustry {
  optional string url_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  // The LinkedIn industry code.
  // https://developer.linkedin.com/documents/industry-codes
  optional int32 industry_code_id = 2 [
    (required) = YES,
    (storage_method) = INDEX
  ];
  
  optional string trainer_user_id = 3 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];
}

// In-memory object.  Not stored in DB.
message IndustryCode {
  // The LinkedIn industry code.
  // https://developer.linkedin.com/documents/industry-codes
  optional int32 id = 1 [
    (required) = YES
  ];

  // The LinkedIn industry group.
  optional string group = 2 [
    (required) = YES,
    (string_length) = 50
  ];
  
  // The LinkedIn industry description.
  optional string description = 3 [
    (required) = YES,
    (string_length) = 100
  ];
}

message TrainedArticleClassification {
  optional string url_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string article_classification_code = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 5,
    (string_charset) = LATIN1
  ];
  
  optional bool checked = 3 [
    (required) = YES,
    (storage_method) = INDEX
  ];
  
  optional string trainer_user_id = 4 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];
}

// In-memory object.  Not stored in DB.
message ArticleClassification {
  optional string code = 1 [
    (required) = YES,
    (string_length) = 5
  ];
  
  optional string description = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 100
  ];
}
