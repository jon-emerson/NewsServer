// Core definitions for NewsServer protos.

import "com/janknspank/proto/extensions.proto";

option java_package = "com.janknspank.proto";

message Article {
  extensions 9; // Old fields.

  optional string url_id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24
  ];

  optional string url = 2 [
    (required) = YES,
    (string_length) = 767
  ];

  optional string title = 3 [
    (required) = YES,
    (storage_method) = PULL_OUT,
    (string_length) = 256
  ];

  optional string type = 4 [
    (string_length) = 24
  ];

  optional string author = 5 [
    (string_length) = 256
  ];

  optional string copyright = 6 [
    (string_length) = 256
  ];

  optional string description = 7 [
    (required) = YES,
    (string_length) = 2048
  ];

  optional string image_url = 8 [
    (string_length) = 2048 // 767
  ];

  repeated string paragraph = 13 [
    // (required) = YES,
    (client_serialization) = EXCLUDE,
    (string_length) = 10240
  ];

  optional int64 published_time = 10 [
    (required) = YES,
    (storage_method) = INDEX
  ];

  optional int64 modified_time = 11;
}

message ArticleKeyword {
  optional string url_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (client_serialization) = EXCLUDE
  ];

  // The literal English keyword.
  optional string keyword = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 50
  ];

  // Number of occurrences + other factors.
  optional int32 strength = 3 [
    (required) = YES
  ];

  // 'o' for organization, 'p' for person, 'l' for location, 'k' for keywords
  // found in the article's meta tags.
  optional string type = 4 [
    (required) = YES,
    (storage_method) = PULL_OUT,
    (string_length) = 1
  ];
}

message Link {
  optional string origin_url_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24
  ];

  optional string destination_url_id = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24
  ];

  optional int64 discovery_time = 3 [
    (required) = YES
  ];

  optional int64 last_found_time = 4 [
    (required) = YES
  ];
}

message Url {
  optional string url = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 767
  ];

  optional string id = 2 [
    (required) = YES,
    (storage_method) = UNIQUE_INDEX,
    (string_length) = 24
  ];

  optional int64 tweet_count = 3 [
    (required) = YES
  ];

  optional int64 discovery_time = 4 [
    (required) = YES
  ];

  optional int64 last_crawl_time = 5;

  // Score between 0 to 200, where 200 means "we really should crawl this
  // ASAP", and 0 means we might not even bother.
  // General guidelines:
  // 2000 - A news article from today
  // 100 - A news article from a year ago
  // 10 - A page that's not a news article
  // 0 - Something we've crawled recently
  optional int64 crawl_priority = 6 [
    // (required) = YES,
    (storage_method) = INDEX
  ];
}

message User {
  optional string id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24
  ];

  optional string name = 2 [
    (string_length) = 100
  ];

  optional string email = 3 [
    (required) = YES,
    (storage_method) = UNIQUE_INDEX,
    (string_length) = 100
  ];

  optional string linked_in_id = 4 [
    (string_length) = 24
  ];

  optional string facebook_id = 5 [
    (string_length) = 24
  ];

  optional string password_sha256 = 6 [
    (required) = YES,
    (storage_method) = PULL_OUT,
    (string_length) = 50,
    (client_serialization) = EXCLUDE
  ];

  optional int64 create_time = 7 [
    (required) = YES
  ];

  optional int64 last_login_time = 8;
}

message Session {
  optional string session_key = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 128
  ];

  optional string user_id = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24
  ];

  optional int64 create_time = 3 [
    (required) = YES
  ];
}

message LinkedInProfile {
  optional string user_id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24
  ];

  optional string data = 2 [
    (required) = YES,
    (string_length) = 102400
  ];

  optional int64 create_time = 3 [
    (required) = YES
  ];
}

message LinkedInConnections {
  optional string user_id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24
  ];

  optional string data = 2 [
    (required) = YES,
    (string_length) = 102400
  ];

  optional int64 create_time = 3 [
    (required) = YES
  ];
}

message AddressBook {
  optional string user_id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24
  ];

  optional string data = 2 [
    (required) = YES,
    (string_length) = 102400
  ];

  optional int64 create_time = 3 [
    (required) = YES
  ];
}

message UserUrlRating {
  optional string user_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24
  ];

  optional string url_id = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24
  ];

  optional int32 rating = 3 [
    (required) = YES
  ];

  optional int64 create_time = 4 [
    (required) = YES
  ];
}

message UserUrlFavorite {
  optional string user_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24
  ];

  optional string url_id = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24
  ];

  optional int64 create_time = 3 [
    (storage_method) = PULL_OUT,
    (required) = YES
  ];
}

message UserInterest {
  optional string id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24
  ];

  optional string user_id = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24
  ];

  optional string keyword = 3 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 100
  ];

  // Where did we get this interest from?
  // 'ab' = Address book.
  // 'lp' = LinkedIn profile.
  // 'lc' = LinkedIn contacts.
  // 'u' = From the user himself, explicitly.
  // 't' = Tombstone, represents an interest the user explicitly DELETED.
  optional string source = 4 [
    (required) = YES,
    (storage_method) = PULL_OUT,
    (string_length) = 2
  ];

  // 'o' for organization, 'p' for person, 'l' for location.
  // If not known, NULL.
  optional string type = 5 [
    (string_length) = 1
  ];
}
