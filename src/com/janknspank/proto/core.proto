// Core definitions for NewsServer protos.

import "com/janknspank/database/extensions.proto";
import "com/janknspank/proto/article.proto";

option java_package = "com.janknspank.proto";
option java_outer_classname = "CoreProto";

message Link {
  option (database_collection) = "MongoDB.Link";

  optional string origin_url_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string destination_url_id = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional int64 discovery_time = 3 [
    (required) = YES
  ];

  optional int64 last_found_time = 4 [
    (required) = YES
  ];
}

message Url {
  option (database_collection) = "MongoDB.Url";

  optional string id = 2 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string url = 1 [
    (required) = YES,
    (storage_method) = UNIQUE_INDEX,
    (string_length) = 767,
    (string_charset) = LATIN1
  ];

  optional int64 tweet_count = 3 [
    (required) = YES
  ];

  optional int64 discovery_time = 4 [
    (required) = YES,
    (client_serialization) = EXCLUDE
  ];

  optional int64 last_crawl_start_time = 5 [
    (storage_method) = PULL_OUT,
    (client_serialization) = EXCLUDE
  ];

  optional int64 last_crawl_finish_time = 6 [
    (storage_method) = PULL_OUT,
    (client_serialization) = EXCLUDE
  ];

  // Score between 0 to 200, where 200 means "we really should crawl this
  // ASAP", and 0 means we might not even bother.
  // General guidelines:
  // 2000 - A news article from today
  // 100 - A news article from a year ago
  // 10 - A page that's not a news article
  // 0 - Something we've crawled recently
  optional int64 crawl_priority = 7 [
    // (required) = YES,
    (storage_method) = INDEX,
    (client_serialization) = EXCLUDE
  ];
}

message Session {
  option (database_collection) = "MongoDB.Session";

  optional string session_key = 1 [
    (required) = YES,
    (storage_method) = UNIQUE_INDEX,
    (string_length) = 128
  ];

  optional string user_id = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional int64 create_time = 3 [
    (required) = YES
  ];
}

message Entity {
  option (database_collection) = "MySQL.Entity";

  optional string id = 1 [
    (required) = YES,
    (storage_method) = PRIMARY_KEY,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string keyword = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 100
  ];

  optional string type = 3 [
    (required) = YES,
    (storage_method) = PULL_OUT,
    (string_length) = 5,
    (string_charset) = LATIN1
  ];

  enum Source {
    UNKNOWN = 0;
    DBPEDIA_INSTANCE_TYPE = 1;
    DBPEDIA_LONG_ABSTRACT = 2;
    ANGELLIST = 3;
  }
  optional Source source = 4 [
    (required) = YES,
    (storage_method) = PULL_OUT
  ];

  // If this ID has been found to be semantically equivalent to another ID, this
  // field points at the "canonical" version of this object.  E.g. if we find
  // Google in Wikipedia and AngelList, the Wikipedia Entity would be canonical
  // and would have canonical_id=NULL, while AngelList's Entity would have its
  // canonical_id equal the Wikipedia Entity's id.
  optional string canonical_id = 5 [
    (storage_method) = PULL_OUT,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  // These are unique things about an Entity to disambiguate it from other
  // Entities that might be expressed using the same string.  E.g. there are
  // many Kevin Rose's in the world, but only one that started Digg and worked
  // for Google Ventures.  The guy from Digg would have "Digg" and "Google
  // Ventures" as high-strengthed topics in his Entity.
  message EntityTopic {
    optional string entity_id = 1 [
      (string_length) = 24,
    (string_charset) = LATIN1
    ];

    optional string keyword = 2 [
      (required) = YES,
      (string_length) = 100
    ];

    // same l/o/p types as Entities have
    optional string type = 3 [
      (string_length) = 5,
      (string_charset) = LATIN1
    ];

    // Number of occurrences + other factors.
    optional int32 strength = 4 [
      (required) = YES
    ];

    enum Context {
      UNKNOWN = 0;
      ANGELLIST_WORKED_AT = 1;
      ANGELLIST_FOUNDED = 2;
      ANGELLIST_INVESTED_IN = 3;
      ANGELLIST_ADVISED = 4;
      WIKIPEDIA_SUBTOPIC = 5;
    }
    optional Context context = 5 [
      default = UNKNOWN
    ];
  };
  repeated EntityTopic topic = 6;
}

// A word frequency vector - Could be specific to a document, or could represent
// the entire corpus.
message VectorData {
  // The total number of documents used in creating this vector.
  optional int32 document_count = 1 [
    (required) = YES
  ];

  message WordFrequency {
    optional string word = 1 [
      (required) = YES,
      (string_length) = 50
    ];

    // A count of every time this word has existed in any document in this
    // vector.
    optional int32 frequency = 2 [
      (required) = YES
    ];

    // The number of documents this word appears in.  E.g. if "hello" occurs
    // in one document twice, and another document only once, its 
    // document_occurences value would be 2.
    optional int32 document_occurences = 3 [
      (required) = YES
    ];
  };
  repeated WordFrequency word_frequency = 2;
}

// This stores a user's recommendation that a certain article be trained as
// being part of a specific industry.
message TrainedArticleIndustry {
  option (database_collection) = "MongoDB.TrainedArticleIndustry";

  optional string url_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  // The LinkedIn industry code.
  // https://developer.linkedin.com/documents/industry-codes
  optional int32 industry_code_id = 2 [
    (required) = YES,
    (storage_method) = INDEX
  ];

  optional string trainer_user_id = 3 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];
}

// This stores a user's recommendation that a certain article be trained as
// being a certain class of article (e.g. opinion, fluff, tutorial, etc.).
message TrainedArticleClassification {
  option (database_collection) = "MongoDB.TrainedArticleClassification";

  optional string url_id = 1 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];

  optional string article_classification_code = 2 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 5,
    (string_charset) = LATIN1
  ];

  optional bool checked = 3 [
    (required) = YES,
    (storage_method) = INDEX
  ];

  optional string trainer_user_id = 4 [
    (required) = YES,
    (storage_method) = INDEX,
    (string_length) = 24,
    (string_charset) = LATIN1
  ];
}

message InterpretedData {
  optional Article article = 1;
  repeated string url = 2;
}
